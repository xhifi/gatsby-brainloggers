<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   id="visual"
   viewBox="0 0 960 540"
   width="960"
   height="540"
   version="1.1"
   sodipodi:docname="wave-1.svg"
   inkscape:version="1.1 (c68e22c387, 2021-05-23)"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <defs
     id="defs11">
    <filter
       inkscape:collect="always"
       style="color-interpolation-filters:sRGB"
       id="filter8105"
       x="-0.028015242"
       y="-0.16745331"
       width="1.0560305"
       height="1.3349066">
      <feGaussianBlur
         inkscape:collect="always"
         stdDeviation="11.206097"
         id="feGaussianBlur8107" />
    </filter>
    <clipPath
       clipPathUnits="userSpaceOnUse"
       id="clipPath8417">
      <rect
         x="0"
         y="0"
         width="960"
         height="540"
         fill="#1c0c5b"
         id="rect8419" />
    </clipPath>
  </defs>
  <sodipodi:namedview
     id="namedview9"
     pagecolor="#505050"
     bordercolor="#ffffff"
     borderopacity="1"
     inkscape:pageshadow="0"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="1"
     showgrid="false"
     inkscape:zoom="1.3041667"
     inkscape:cx="496.86901"
     inkscape:cy="282.55591"
     inkscape:window-width="1920"
     inkscape:window-height="991"
     inkscape:window-x="-9"
     inkscape:window-y="-9"
     inkscape:window-maximized="1"
     inkscape:current-layer="visual" />
  <script
     id="script2">(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <rect
     x="0"
     y="0"
     width="960"
     height="540"
     fill="#1C0C5B"
     id="rect4"
     style="fill:#1c0c5b;fill-opacity:0" />
  <path
     style="color:#000000;fill:#000000;stroke-width:6.67087;-inkscape-stroke:none;paint-order:stroke fill markers;filter:url(#filter8105);fill-opacity:0.74857146"
     d="m 0,507.54575 c 73.76181,28.78611 282.34949,26.65068 352.3589,-6.05737 55.34635,-25.85754 75.41265,-63.96178 143.88843,-64.32711 80.40472,-0.42897 87.98595,57.46251 157.45386,52.3424 59.56136,-4.38996 63.67152,-76.40427 133.41061,-100.00375 73.48052,-24.86557 128.94764,4.23562 172.8882,50.27202 V 540.99998 H 0 Z"
     id="path8085"
     sodipodi:nodetypes="csssscccc"
     clip-path="url(#clipPath8417)" />
  <path
     style="color:#000000;fill:#fb9eed;stroke-width:6.67087;-inkscape-stroke:none;paint-order:stroke fill markers;fill-opacity:1.0"
     d="m 0,507.54575 c 73.76181,28.78611 281.33144,29.42193 352.3589,-6.05737 56.9829,-28.46383 75.41265,-63.96178 143.88843,-64.32711 80.40472,-0.42897 87.98595,57.46251 157.45386,52.3424 59.56136,-4.38996 63.67152,-76.40427 133.41061,-100.00375 73.48052,-24.86557 128.94764,4.23562 172.8882,50.27202 V 540.99998 H 0 Z"
     id="rect1336"
     sodipodi:nodetypes="csssscccc" />
</svg>
